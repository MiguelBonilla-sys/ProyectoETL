#!/usr/bin/env python3
"""
Script simple para diagnosticar la conexi√≥n a Supabase
"""

import os
import sys
from datetime import datetime

# Configurar path para imports locales
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    print("="*60)
    print("üîß DIAGN√ìSTICO DE CONEXI√ìN SUPABASE")
    print("="*60)
    print(f"Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-"*60)
    
    # Test 1: Importar m√≥dulos
    print("üì¶ Test 1: Importando m√≥dulos...")
    try:
        from Database.connection import DatabaseManager, get_session
        print("  ‚úÖ Database.connection importado correctamente")
    except Exception as e:
        print(f"  ‚ùå Error importando Database.connection: {e}")
        sys.exit(1)
    
    try:
        from Models.driver import Driver
        from Models.constructor import Constructor
        from Models.qualifying import QualifyingResult
        print("  ‚úÖ Modelos importados correctamente")
    except Exception as e:
        print(f"  ‚ùå Error importando modelos: {e}")
        sys.exit(1)
    
    # Test 2: Verificar variables de entorno
    print("\nüîß Test 2: Verificando configuraci√≥n...")
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        # Ocultar la contrase√±a en el log
        safe_url = database_url.replace('vAdb2QmOR3BhmNew', '***PASSWORD***')
        print(f"  ‚úÖ DATABASE_URL configurada: {safe_url}")
    else:
        print("  ‚ùå DATABASE_URL no configurada")
        sys.exit(1)
    
    # Test 3: Probar conexi√≥n
    print("\nüåê Test 3: Probando conexi√≥n a Supabase...")
    try:
        from Database.connection import get_engine
        engine = get_engine()
        print("  ‚úÖ Engine obtenido correctamente")
        
        # Probar conexi√≥n real
        with engine.connect() as conn:
            from sqlalchemy import text
            result = conn.execute(text("SELECT 1 as test"))
            test_value = result.fetchone()[0]
            if test_value == 1:
                print("  ‚úÖ Conexi√≥n a Supabase exitosa")
            else:
                print("  ‚ùå Conexi√≥n problem√°tica")
                
    except Exception as e:
        print(f"  ‚ùå Error de conexi√≥n: {e}")
        sys.exit(1)
    
    # Test 4: Verificar tablas
    print("\nüìã Test 4: Verificando tablas en Supabase...")
    try:
        with get_session() as session:
            from sqlalchemy import text
            # Verificar si las tablas existen usando queries simples
            try:
                driver_count = session.execute(text("SELECT COUNT(*) FROM drivers")).scalar()
                print(f"  ‚úÖ Tabla 'drivers' existe - Registros: {driver_count}")
            except Exception as e:
                print(f"  ‚ùå Tabla 'drivers' no existe o error: {e}")
            
            try:
                constructor_count = session.execute(text("SELECT COUNT(*) FROM constructors")).scalar()
                print(f"  ‚úÖ Tabla 'constructors' existe - Registros: {constructor_count}")
            except Exception as e:
                print(f"  ‚ùå Tabla 'constructors' no existe o error: {e}")
            
            try:
                qualifying_count = session.execute(text("SELECT COUNT(*) FROM qualifying_results")).scalar()
                print(f"  ‚úÖ Tabla 'qualifying_results' existe - Registros: {qualifying_count}")
            except Exception as e:
                print(f"  ‚ùå Tabla 'qualifying_results' no existe o error: {e}")
                
    except Exception as e:
        print(f"  ‚ùå Error verificando tablas: {e}")
    
    print("\n" + "="*60)
    print("‚úÖ DIAGN√ìSTICO COMPLETADO")
    print("="*60)
    
except Exception as e:
    print(f"‚ùå Error general en diagn√≥stico: {e}")
    import traceback
    traceback.print_exc()
